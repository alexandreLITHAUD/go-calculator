name: CI/CD with DevBox Cache

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - "**/*.md"
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          extra_nix_config: |
            max-jobs = auto
            cores = 0

      # Cache Go modules
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go.sum', 'go.mod') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install DevBox
        uses: jetpack-io/devbox-install-action@v0.13.0
        with:
          enable-cache: true

      # Installation des dépendances
      - name: Install Dependencies
        run: devbox run deps

      # Formatage du code
      - name: Format Code
        run: devbox run fmt

      # Linting
      - name: Lint Code
        run: devbox run lint

      # Linting approfondi
      - name: Thorough Linting
        continue-on-error: true
        run: |
          set +e
          OUTPUT=$(devbox run lint-thorough 2>&1)
          if [ $? -ne 0 ]; then
            echo "::warning::🔍 Linting issues found:\n$OUTPUT"
            exit 0
          fi

      # Tests unitaires
      - name: Run Tests
        run: devbox run test

      # Tests de couverture
      - name: Run Coverage
        run: devbox run coverage

      # Upload de la couverture
      - name: Upload Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v31

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go.sum', 'go.mod') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install DevBox
        uses: jetpack-io/devbox-install-action@v0.13.0
        with:
          enable-cache: true

      # Build de l'application
      - name: Build Application
        run: devbox run build

      # Upload des artéfacts
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: go-calculator-${{ github.sha }}
          path: |
            dist/
            *.md

  benchmark:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v31

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go.sum', 'go.mod') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install DevBox
        uses: jetpack-io/devbox-install-action@v0.13.0
        with:
          enable-cache: true

      # Benchmarks
      - name: Run Benchmarks
        run: devbox run benchmark

      - name: Upload Benchmark Results
        uses: actions/upload-artifact@v4
        with:
          name: benchmarks-${{ github.sha }}
          path: benchmark.txt

  # cleanup-cache:
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   needs: [test, build]

  # steps:
  #   - name: Cleanup old caches
  #     uses: actions/github-script@v7
  #     with:
  #       script: |
  #         // Use github.request to directly call the REST API endpoint for listing caches
  #         const { data: cachesData } = await github.request('GET /repos/{owner}/{repo}/actions/caches', {
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #         });

  #         // Extract the caches array from the response
  #         const caches = cachesData.actions_caches;

  #         // Garde seulement les 3 caches les plus récents
  #         // Sort caches by creation date in descending order and keep only the first 5
  #         const oldCaches = caches
  #             .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
  #             .slice(3); // Keep the first 3, so slice from index 5 onwards to get old caches

  #         for (const cache of oldCaches) {
  #             console.log(`Deleting cache: ${cache.key} (ID: ${cache.id})`);
  #             await github.rest.actions.deleteActionsCacheById({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             cache_id: cache.id,
  #             });
  #         }
  #         console.log(`Deleted ${oldCaches.length} old caches.`);
